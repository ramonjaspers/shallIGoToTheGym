// // Import react module and components
// import React, { createContext, useEffect, useState } from 'react';
// import { useHistory } from 'react-router-dom';
// import jwtDecode from 'jwt-decode';
// import axios from 'axios';
// import Loader from "react-loader-spinner";
// // import helpers
// import tokenState from '../helpers/tokenState.js';

// export const WorkoutContext = createContext({});

// /**
//  * 
//  * Workout logic for the app 
//  * @param {*} children 
//  * @returns void
//  */
// export default function WorkoutContextProivder({ children }) {
//     // Set default states
//     const [isAuth, toggleIsAuth] = useState({ isAuth: false, user: null, status: 'pending' });
//     const [workout, setWorkout] = useState({ user: null, exercises: {} });
//     const history = useHistory();

//     /**
//      * Mounting phase
//      * checks for existing tokens and mounts the state
//      */
//     useEffect(() => {
//         // Fetch token from localStorage
//         const token = localStorage.getItem('token');
//         if (token && tokenState(token)) {
//             fetchUserData(token);
//         } else {
//             // Set default values
//             toggleIsAuth({ ...isAuth, status: 'done' })
//         }
//     }, [/** on mount */]);

//     /**
//      * 
//      * Sets the user validation JWT token
//      * @param {*} JWT 
//      */
//     function setWorkout(JWT) {
//         // insert JWT into local storage, fetch user data and set auth = true
//         localStorage.setItem('token', JWT);
//         //set user data
//         const token = jwtDecode(JWT);
//         console.log(token);
//         toggleIsAuth({ user: { id: token.sub }, isAuth: true, status: 'done' });
//         console.log('Gebruiker is ingelogd!');
//         // goto profile page
//         history.push('/profile');
//     }

//     /**
//      * 
//      * Removes the JWT token, sets the authState to false and redirects to the hompeage
//      */
//     function deleteWorkout() {
//         // Remove token and unset authentication
//         localStorage.removeItem('token')
//         toggleIsAuth({ ...isAuth, isAuth: false });
//         console.log('Gebruiker is uitgelogd!');
//         // Goto homepage
//         history.push('/');
//     }

//     function getWorkout(JWT) {
//         // If a token is present request the user data
//         axios.get(`https://polar-lake-14365.herokuapp.com/api/user`, {
//             headers: {
//                 "Content-Type": "application/json",
//                 Authorization: `Bearer ${JWT}`,
//             }
//         }).then(({ data }) => {
//             console.log(data);
//             // Set the recieved user data into the state
//             toggleIsAuth({
//                 isAuth: true,
//                 user: {
//                     email: data.email,
//                     username: data.username,
//                     id: data.id
//                 },
//                 status: 'done'
//             })
//             // If something goes wrong it means the do nothing
//         }).catch(() => {
//             toggleIsAuth({ ...isAuth, status: 'done' })
//         });
//     }

//     //TODO MAYBE STORE WORKOUT UNDER USER>>>??????
//     const contextData = {
//         user: workout.user,
//         exercises: workout.exercises,
//     }

//     // app auth wrapper
//     return (
//         <AuthContext.Provider value={contextData}>
//             {isAuth.status === 'done' ? children :
//                 <div style={{ textAlign: "center" }}>
//                     <h1>Loading... please wait.</h1>
//                     <Loader type="TailSpin" color="#00BFFF" height={400} width={400} />
//                 </div>}
//         </AuthContext.Provider>
//     )
// }